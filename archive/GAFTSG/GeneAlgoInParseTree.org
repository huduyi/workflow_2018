#+TITLE: 利用遗传算法在 parse tree 上找到最佳拟合函数

* 数据结构

  找到一个方程，能够拟合方程 $f(x,y)$
  
  |  X |  Y | Results |
  |----+----+---------|
  | 26 | 35 |     829 |
  |  8 | 24 |     141 |
  | 20 |  1 |     467 |
  | 33 | 11 |    1215 |
  | 37 | 16 |    1517 |

* 使用树结构表示方程
  
** Parse Tree  

  如下图所示，树上每个节点表示对它子节点进行的数学操作或者一个参数或变量。运算时，树从下往上收缩。
  [[file:GeneAlgoInParseTree/01.png]]
  
** 代码表示 
   
   1. 上面的图的逻辑，用代码表示，如下：
      #+BEGIN_SRC python
        def func(x, y):
            if x > 3:
                return y + 5
            else:
                return y - 2
      #+END_SRC
   2. 树的基本结构代码表示
      #+BEGIN_SRC python
        class fwrapper:
            """
            代表一种运算，接受 3 个参数：
            - 函数的定义
            - 参数的个数
            - 函数的名字
            """
            def __init__(self, function, childcount, name):
                self.function = function
                self.childcount = childcount
                self.name = name

        class node:
            """
            一个节点，其 evaluate 函数可以接受子节点的输入，并把
            fwrapper 定义的函数运用在子节点上，得到输出结果; 其
            display 函数可以打印出节点以下树的形式
            """
            def __init__(self, fw, children):
                self.function = fw.function
                self.name = fw.name
                self.children = children
            def evaluate(self, inp):
                results = [n.evaluate(inp) for n in self.children]
                return self.function(results)
            def display(self, indent=0):
                print(' '*indent, self.children)
                for c in self.children:
                    c.display(indent+1)

        class paramnode:
            """
            参数节点：返回输入的参数 idx
            """
            def __init__(self, idx):
                self.idx = idx
            def evaluate(self, inp):
                return inp[self.idx]
            def display(self, indent=0):
                print('%s%d'%(' '*indent, self.idx))

        class constnode:
            """
            常数节点：不管输入什么，总是返回一个常数
            """
            def __init__(self, v):
                self.v = v
            def evaluate(self, inp):
                return self.v
            def display(self, indent=0):
                print('%s%d'%(' '*indent, self.v))
      #+END_SRC
   
* 变异
  
  变异对于 01 串表达程序的遗传算法模型来说就是随机地把一些 0 变为 1 或者相反。在树结构中，我们定义两种变异：
  
** 改变节点上的操作符号

   [[file:GeneAlgoInParseTree/02.png]]
   
** 替换树的一部分枝干

   [[file:GeneAlgoInParseTree/03.png]]
   
* 交配
  
  让两棵树相遇，互换一部分枝干，拼接处一颗新的树
  
  [[file:GeneAlgoInParseTree/04.png]]
* 基本运算定义 
  
  包括 加，减，乘，If判断， > 判断

  #+BEGIN_SRC python
    addw = fwrapper(lambda l: l[0]+l[1], 2, 'add')
    subw = fwrapper(lambda l: l[0]-l[1], 2, 'subtract')
    mulw = fwrapper(lambda l: l[0]*l[1], 2, 'multiply')

    def iffunc(l):
        if l[0] > 0: return l[1]
        else: return l[2]

    ifw = fwrapper(iffunc, 3, 'if')

    def isgreater(l):
        if l[0] > l[1]: return l
        else: return 0

    gtw = fwrapper(isgreater, 2, 'isgreater')

    flist = [addw, mulw, ifw, gtw, subw]
  #+END_SRC
* 示例

  #+BEGIN_SRC python
    def exampletree():
        return node(ifw, [
            node(gtw, [paramnode(0), constnode(3)]),
            node(addw, [paramnode(1), constnode(5)]),
            node(subw, [paramnode(1), constnode(2)])
        ])

    exampletree = exampletree()
    exampletree.evaluate([2, 3])
    exampletree.evaluate([5, 3])
    exampletree.display()
  #+END_SRC
* 应用
